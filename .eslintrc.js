module.exports = {
  parser: '@babel/eslint-parser',
  extends: ['google', 'eslint:recommended', 'plugin:react/recommended'],
  plugins: ['react', '@babel'],
  settings: { react: { version: '16.9.0' } },
  env: { browser: true, es6: true, node: true, jest: true },
  parserOptions: {
    ecmaVersion: 2016,
    sourceType: 'module',
    ecmaFeatures: { jsx: true },
    babelOptions: { configFile: './.babelrc.js' }
  },
  globals: {
    before: true,
    after: true,
    spyOn: true,
    NodeJS: true,
    JSX: true,
    NodeRequire: true,
    TimerHandler: true,
    __PATH_PREFIX__: true,
    __BASE_PATH__: true,
    __ASSET_PREFIX__: true
  },
  rules: {
    'operator-linebreak': ['error', 'before'],
    'brace-style': ['error', '1tbs', { allowSingleLine: true }],
    'block-spacing': ['error', 'always'],
    'comma-dangle': ['error', 'never'],
    'semi': ['error', 'never'],
    'no-extra-semi': 'off',
    'indent': ['error', 2],
    'object-curly-spacing': ['error', 'always'],
    'max-len': ['error', 220, 2],
    '@babel/no-unused-expressions': ['error', { allowTaggedTemplates: true }],
    'no-unused-expressions': 'off',
    '@babel/no-invalid-this': 'error',
    'no-invalid-this': 'off',
    'arrow-body-style': ['off'],
    'new-cap': 'off',
    'no-unused-vars': ['warn', { varsIgnorePattern: '^_', argsIgnorePattern: '^_', ignoreRestSiblings: true }],
    'consistent-return': ['error'],
    'no-console': 'off',
    'no-inner-declarations': 'off',
    'quotes': ['error', 'single'],
    'react/display-name': 'off',
    'react/jsx-key': 'warn',
    'react/no-unescaped-entities': 'off',
    'react/prop-types': 'off',
    'require-jsdoc': 'off',
    'valid-jsdoc': 'off',
    'prefer-promise-reject-errors': 'warn',
    'no-prototype-builtins': 'warn',
    'guard-for-in': 'warn',
    'spaced-comment': ['error', 'always', { markers: ['/'], exceptions: ['*', '+'] }],
    'camelcase': ['error', { properties: 'never', ignoreDestructuring: true, allow: ['^unstable_'] }]
  },
  overrides: [{
    files: ['gatsby-browser.js'],
    env: { browser: true },
    globals: { ___loader: false, ___emitter: false }
  }, {
    files: ['*.ts', '*.tsx'],
    parser: '@typescript-eslint/parser',
    plugins: ['@typescript-eslint/eslint-plugin'],
    extends: ['plugin:@typescript-eslint/recommended'],
    rules: {
      'quotes': 'off',
      'camelcase': 'off',
      '@typescript-eslint/ban-ts-comment': ['warn', { 'ts-ignore': 'allow-with-description' }],
      '@typescript-eslint/no-inferrable-types': ['error', { ignoreParameters: true }],
      '@typescript-eslint/ban-types': ['error', { extendDefaults: true, types: { '{}': { fixWith: 'Record<string, unknown>' }, 'object': { fixWith: 'Record<string, unknown>' } } }],
      '@typescript-eslint/no-explicit-any': 'off',
      '@typescript-eslint/no-var-requires': 'off',
      '@typescript-eslint/no-extra-semi': ['error'],
      '@typescript-eslint/member-delimiter-style': ['error', { multiline: { delimiter: 'none' } }],
      '@typescript-eslint/no-empty-function': 'off',
      '@typescript-eslint/explicit-function-return-type': 'off',
      '@typescript-eslint/explicit-module-boundary-types': 'off',
      '@typescript-eslint/consistent-type-definitions': ['error', 'interface'],
      '@typescript-eslint/no-use-before-define': ['error', { functions: false }],
      '@typescript-eslint/quotes': ['error', 'single'],
      '@typescript-eslint/naming-convention': ['error',
        { selector: 'default', format: ['camelCase'] },
        { selector: 'variable', format: ['camelCase', 'UPPER_CASE', 'PascalCase'], leadingUnderscore: 'allowSingleOrDouble', trailingUnderscore: 'allowSingleOrDouble' },
        { selector: 'function', format: ['camelCase', 'PascalCase'], leadingUnderscore: 'allow' },
        { selector: 'parameter', format: ['camelCase', 'PascalCase', 'snake_case'], leadingUnderscore: 'allowSingleOrDouble' },
        { selector: 'enumMember', format: ['camelCase', 'UPPER_CASE', 'PascalCase'] },
        { selector: 'typeLike', format: ['PascalCase'] },
        { selector: 'typeAlias', format: ['camelCase', 'PascalCase'] },
        { selector: 'property', format: ['PascalCase', 'UPPER_CASE', 'camelCase', 'snake_case'], leadingUnderscore: 'allowSingleOrDouble' },
        { selector: 'objectLiteralProperty', format: ['PascalCase', 'UPPER_CASE', 'camelCase', 'snake_case'], leadingUnderscore: 'allowSingleOrDouble', trailingUnderscore: 'allowSingleOrDouble' },
        { selector: 'enum', format: ['PascalCase', 'UPPER_CASE'] },
        { selector: 'method', format: ['PascalCase', 'camelCase'], leadingUnderscore: 'allowSingleOrDouble' },
        { selector: 'interface', format: ['PascalCase'] }
      ]
    }
  }]
}
